{"version":3,"sources":["calSlice.js","components/Display.js","components/Numbers.js","components/Operators.js","components/Footer.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["calSlice","createSlice","name","initialState","value","clicked","isEqualSigned","reducers","operate","state","action","payload","getNumber","equalCal","tempValue","eval","toFixed","ac","plusMinus","percentage","actions","selectValue","calcualtor","Display","props","id","className","displayValue","clickedValue","Numbers","dispatch","useDispatch","onClick","Operators","style","borderBottomRightRadius","Footer","padding","role","aria-label","App","useSelector","calculator","counterSlice","increment","decrement","incrementByAmount","configureStore","reducer","counter","counterReducer","calReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a1e453e.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const calSlice = createSlice({\n    name: 'cal',\n    initialState: {\n        value: 0,\n        clicked: 0,\n        isEqualSigned: false,\n    },\n    reducers: {\n        operate: (state, action) => {\n            // console.log('state:', state, 'action:', action)\n            state.value = state.value + action.payload;\n            state.clicked = '';\n        },\n        getNumber: (state, action) => {\n            if (!state.isEqualSigned) {\n                if (state.value === 0) {\n                    state.value = action.payload;\n                    state.clicked = action.payload;\n                } else {\n                    state.value = state.value + action.payload;\n                    state.clicked = state.clicked + action.payload;\n                } \n            } else {\n                state.value = action.payload;;\n                state.clicked = action.payload;;\n            }\n            \n        },\n        equalCal: (state) => {\n            // console.log('equalCal state', state.value)\n            let tempValue = +eval(state.value).toFixed(4);\n            state.value = tempValue;\n            state.clicked = tempValue;\n            state.isEqualSigned = !state.isEqualSigned;\n        },\n        ac: state => {\n            state.value = 0;\n            state.clicked = 0;\n        },\n        plusMinus: state => {\n            state.value = -state.value;\n            state.clicked = -state.clicked;\n        },\n        percentage: state => {\n            state.value *= 0.01\n            state.clicked *= 0.01\n        }\n\n    }\n});\n\nexport const { equalCal, operate, getNumber, ac, plusMinus, percentage } = calSlice.actions;\n\nexport const selectValue = state => state.calcualtor.value;\n\nexport default calSlice.reducer;","import React from \"react\";\n\nconst Display = props => {\n    return (\n        <div>\n            <div id=\"display\" className=\"display\">\n                <p>{props.displayValue}</p>\n                <p className=\"display-main\">{props.clickedValue}</p>\n            </div>\n            {/* <div>Cal history</div> */}\n        </div>\n    )\n}\n\nexport default Display;","import React from \"react\";\nimport { getNumber, ac, plusMinus, percentage } from '../calSlice';\nimport { useDispatch } from \"react-redux\";\n// button for 0-9 and `.` // 0 will take 2x space\n\nconst Numbers = () => {\n    const dispatch = useDispatch();\n    return (\n        <div className=\"num-group\">\n            <div className=\"num-btn num-operator\" id=\"clear\"\n                onClick={() => dispatch(ac())}>AC</div>\n            <div className=\"num-btn num-operator\"\n                onClick={() => dispatch(plusMinus())}>+/-</div>\n            <div className=\"num-btn num-operator\"\n                onClick={() => dispatch(percentage())}>%</div>\n            <div className=\"num-btn\" id=\"seven\"\n                onClick={() => dispatch(getNumber('7'))}>7</div>\n            <div className=\"num-btn\" id=\"eight\"\n                onClick={() => dispatch(getNumber('8'))}>8</div>\n            <div className=\"num-btn\" id=\"nine\"\n                onClick={() => dispatch(getNumber('9'))}>9</div>\n            <div className=\"num-btn\" id=\"four\"\n                onClick={() => dispatch(getNumber('4'))}>4</div>\n            <div className=\"num-btn\" id=\"five\"\n                onClick={() => dispatch(getNumber('5'))}>5</div>\n            <div className=\"num-btn\" id=\"six\"\n                onClick={() => dispatch(getNumber('6'))}>6</div>\n            <div className=\"num-btn\" id=\"one\"\n                onClick={() => dispatch(getNumber('1'))}>1</div>\n            <div className=\"num-btn\" id=\"two\"\n                onClick={() => dispatch(getNumber('2'))}>2</div>\n            <div className=\"num-btn\" id=\"three\"\n                onClick={() => dispatch(getNumber('3'))}>3</div>\n            <div className=\"num-btn num-zero\" id=\"zero\"\n                onClick={() => dispatch(getNumber('0'))}>0</div>\n            <div className=\"num-btn\" id=\"decimal\"\n                onClick={() => dispatch(getNumber('.'))}>.</div>\n        </div>\n    )\n}\n\nexport default Numbers;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { equalCal, operate\n} from '../calSlice';\nconst Operators = props => {\n    const dispatch = useDispatch();\n    // console.log('in Operators:', props)\n    return (\n        <div className=\"operator-group\">\n            <div \n                className=\"num-btn orange-operator\" id=\"divide\"\n                onClick={() => dispatch(operate('/'))}>÷</div>\n            <div \n                className=\"num-btn orange-operator\" id=\"multiply\"\n                onClick={() => dispatch(operate('*'))}>x</div>\n            <div \n                className=\"num-btn orange-operator\" id=\"subract\"\n                onClick={() => dispatch(operate('-'))}>-</div>\n            <div \n                className=\"num-btn orange-operator\" id=\"add\"\n                onClick={() => dispatch(operate('+'))}>+</div>\n            <div \n                className=\"num-btn orange-operator\"\n                onClick={() => dispatch(equalCal())}\n                style={{borderBottomRightRadius: '10px'}}>=</div>\n        </div>\n    )\n}\n\nexport default Operators;","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <div style={{padding: \"5em\"}}>\n            <span role=\"img\" aria-label=\"wm-programmer\">👩🏻‍💻</span>          \n            <p>Email me: areumjo1@gmail.com</p>\n            <p>© 2020 Areum Jo</p>\n        </div>\n    )\n}\n\nexport default Footer;","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Display from './components/Display';\r\nimport Numbers from './components/Numbers';\r\nimport Operators from './components/Operators';\r\nimport Footer from './components/Footer';\r\n// import { Counter } from './features/counter/Counter';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const displayValue = useSelector(state => state.calculator.value);\r\n  const clickedValue = useSelector(state => state.calculator.clicked)\r\n  // console.log(displayValue, 'click:', clickedValue)\r\n  // when operator is clicked, clear clickedValue (use setClickedVale)\r\n  return (\r\n    <div className=\"App\">\r\n      <h2 className=\"title\">Redux-Toolkit Calculator</h2>\r\n      <div className=\"box\">\r\n        <Display displayValue={displayValue} clickedValue={clickedValue} />\r\n        <div className=\"btn-pannel\">\r\n          <Numbers />\r\n          <Operators clickedValue={clickedValue}  />\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport calReducer from '../calSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    calculator: calReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}